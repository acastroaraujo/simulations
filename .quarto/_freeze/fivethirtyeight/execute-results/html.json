{
  "hash": "babcf101efe6682cc1dd4bf7687c3b8d",
  "result": {
    "markdown": "# FiveThirtyEight\n\nThis is my first simulation notebook, inspired by [David Robinson's youtube screencast](https://www.youtube.com/watch?v=XEsNpxl5b1M).\n\nHopefully this will become a regular exercise for me.\n\n**Source:**\n\n-   https://fivethirtyeight.com/features/can-you-get-the-gloves-out-of-the-box/\n\n## Riddler Express\n\n> These days I always have a pack of latex gloves nearby. But it's notoriously difficult to pull exactly two gloves out of the box at a time. Sometimes I'll pull out two gloves, other times three, and yet other times four. **Somehow, I never pull out any other number of gloves at a time.**\n>\n> This morning, I noticed that there are 10 gloves left in the box. How many distinct ways are there for me to remove all 10 gloves from the box? Note that the order matters here --- for example, pulling out two gloves, then four gloves and then another four gloves is distinct from pulling out four gloves, another four gloves and then two gloves.\n\nThis is a counting exercise.\n\nBasically, we are finding sequences of 2, 3, and 4s that add up to 10.\n\n**Pen and paper**:\n\n-   $\\{2, 2, 2, 2, 2\\} \\times 1$\n\n-   $\\{4, 2, 2, 2\\} \\times 4$\n\n-   $\\{4, 4, 2\\} \\times 3$\n\n-   $\\{3, 3, 4\\} \\times 3$\n\n-   $\\{3, 3, 2, 2\\} \\times 5$\n\n*Total*: $1 + 3 + 3 + 4 + 5 = 16$\n\n## Riddler Classic\n\n> From Chris Nho comes a question of rolling (and re-rolling) a die:\n>\n> You start with a fair 6-sided die and roll it six times, recording the results of each roll. You then write these numbers on the six faces of another, unlabeled fair die. For example, if your six rolls were 3, 5, 3, 6, 1 and 2, then your second die wouldn't have a 4 on it; instead, it would have two 3s.\n>\n> Next, you roll this second die six times. You take those six numbers and write them on the faces of yet another fair die, and you continue this process of generating a new die from the previous one.\n>\n> Eventually, you'll have a die with the same number on all six faces. What is the average number of rolls it will take to reach this state?\n>\n> Extra credit: Instead of a standard 6-sided die, suppose you have an N-sided die, whose sides are numbered from 1 to N. What is the average number of rolls it would take until all N sides show the same number?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# https://fivethirtyeight.com/features/can-you-get-the-gloves-out-of-the-box/\n\ndie <- 1:6\n\ndie <- sample(die, replace = TRUE)\ndie <- sample(die, replace = TRUE)\ndie <- sample(die, replace = TRUE)\n## etc.\ndie\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6 4 5 6 5 5\n```\n:::\n\n```{.r .cell-code}\ndie <- 1:6\nn <- 0\nwhile (length(unique(die)) > 1) {\n  die <- sample(die, replace = TRUE)\n  n <- n + 1\n}\ndie\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 2 2 2 2 2\n```\n:::\n\n```{.r .cell-code}\nn\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n\n```{.r .cell-code}\nsimulation <- function(num_sides = 6) {\n  die <- 1:num_sides\n  n <- 0\n  while (length(unique(die)) > 1) {\n    die <- sample(die, replace = TRUE)\n    n <- n + 1\n  }\n  return(n)\n}\n\nresult <- replicate(1e4, simulation())\nmean(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9.6374\n```\n:::\n\n```{.r .cell-code}\nhist(result)\n\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.4 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.2      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n::: {.cell-output-display}\n![](fivethirtyeight_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\nresult <- map_dbl(1:1e4, ~ simulation())\nmean(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9.574\n```\n:::\n\n```{.r .cell-code}\naccumulate(1:10, ~ sample(., replace = TRUE), .init = 1:6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 1 2 3 4 5 6\n\n[[2]]\n[1] 4 1 1 5 5 6\n\n[[3]]\n[1] 5 1 5 1 5 5\n\n[[4]]\n[1] 5 1 5 5 5 1\n\n[[5]]\n[1] 5 5 5 1 1 5\n\n[[6]]\n[1] 5 5 5 1 5 1\n\n[[7]]\n[1] 5 5 5 5 5 5\n\n[[8]]\n[1] 5 5 5 5 5 5\n\n[[9]]\n[1] 5 5 5 5 5 5\n\n[[10]]\n[1] 5 5 5 5 5 5\n\n[[11]]\n[1] 5 5 5 5 5 5\n```\n:::\n\n```{.r .cell-code}\nsimulate_with_purrr <- function(num_sides = 6) {\n  rolls <- accumulate(1:1e3, function(x, ...) {\n    die <- sample(x, replace = TRUE) \n  \n      if (length(unique(die)) == 1) {\n        done(die)\n      } else {\n        die\n      }\n    }, .init = 1:num_sides)\n  return(length(rolls) - 1)\n}\n\nresult <- replicate(100, simulate_with_purrr(50))\n\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] 160 190  86  65  57  48 108  72  70  44  80  41  88  77  43 113  82  47\n [19]  69  77  37  65  82  62  46 137  27  57  60  85 153  87 158  60  82  78\n [37]  46  44 106  69  43  37  35 155 149 112  43  63 153  50 157  67  36  51\n [55]  68  98  62  53  82  98 148  50  44  41 100 104  97 195  98  64  50 364\n [73] 126 152  99 110  99 246  90  88  64 134 116 141 118 123  40  73  64 168\n [91]  63 128  89  96  68 149 125  59 169 187\n```\n:::\n\n```{.r .cell-code}\ndf <- crossing(num_sides = 1:10, trial = 1:1000) %>% \n  mutate(sim = map_dbl(num_sides, simulate_with_purrr))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10,000 × 3\n   num_sides trial   sim\n       <int> <int> <dbl>\n 1         1     1     1\n 2         1     2     1\n 3         1     3     1\n 4         1     4     1\n 5         1     5     1\n 6         1     6     1\n 7         1     7     1\n 8         1     8     1\n 9         1     9     1\n10         1    10     1\n# … with 9,990 more rows\n```\n:::\n\n```{.r .cell-code}\ndf %>% \n  group_by(num_sides) %>% \n  summarize(avg = mean(sim)) %>% \n  ggplot(aes(num_sides, avg)) + \n  geom_point() + \n  geom_smooth(method = lm)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](fivethirtyeight_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n\n```{.r .cell-code}\ndf_avg <- df %>% \n  group_by(num_sides) %>% \n  summarize(avg = mean(sim))\n\nlm(avg ~ num_sides, data = df_avg %>% filter(num_sides > 1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = avg ~ num_sides, data = df_avg %>% filter(num_sides > \n    1))\n\nCoefficients:\n(Intercept)    num_sides  \n     -1.652        1.875  \n```\n:::\n\n```{.r .cell-code}\ndf %>% \n  ggplot(aes(x = sim)) + \n  geom_histogram(binwidth = 1) + \n  facet_wrap(~ num_sides, scales = \"free_y\")\n```\n\n::: {.cell-output-display}\n![](fivethirtyeight_files/figure-html/unnamed-chunk-1-3.png){width=672}\n:::\n:::\n",
    "supporting": [
      "fivethirtyeight_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}