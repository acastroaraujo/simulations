{"title":"Mutation","markdown":{"headingText":"Mutation","headingAttr":{"id":"sec-mutation","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n*Note. All quotations come from [here](https://bookdown.org/amesoudi/ABMtutorial_bookdown/model1.html).*\n\n```{r}\n#| label: set up\n#| message: false\n\nlibrary(tidyverse)\ntheme_set(theme_minimal(base_family = \"Amiri\"))\n\nlibrary(future.apply)\nplan(multisession, workers = parallel::detectCores() - 1L)\n```\n\n> Evolution doesn't work without a source of variation that introduces new variation upon which selection, drift and other processes can act. In genetic evolution, mutation is almost always blind with respect to function. Beneficial genetic mutations are no more likely to arise when they are needed than when they are not needed---in fact most genetic mutations are neutral or detrimental to an organism. Cultural evolution is more interesting, in that novel variation may sometimes be directed to solve specific problems, or systematically biased due to features of our cognition.\n\n## Unbiased Mutation\n\nThis model takes the same basic model as the one used in @sec-unbiased-transmission. We assume $N$ individuals that possess one of two traits $(A, B)$ and a series of generations denoted by $t$. But instead of random copying, each agent gives rise to a new agent with the same cultural trait as them.\n\nFor each generation there is a probability $\\mu$ that each agent mutates from their current trait to the other trait. This probability applies to each agent *independently.* This means that, on average, $\\mu N$ agents mutate each generation. Like in @sec-unbiased-transmission, we are interested in tracking the proportion of agents $p$ with trait $A$ over time.\n\nThis time I'll create a series of helper functions from the start.\n\n```{r}\nUnbiasedMutation <- function(\n    N,      # number of agents,\n    mu,     # mutation probability,\n    p_0,    # initial proportion of trait \"A\"\n    t_max   # number of generations\n  ) {\n  \n  agent <- sample(c(\"A\", \"B\"), size = N, replace = TRUE, prob = c(p_0, 1-p_0))\n  p <- vector(\"double\", length = t_max)\n  p[[1]] <- sum(agent == \"A\") / N\n  \n  for (t in 2:t_max) {\n    previous_agent <- agent  \n    \n    ## mutation\n    mutate <- runif(N)\n    \n    agent[previous_agent == \"A\" & mutate < mu] <- \"B\"\n    agent[previous_agent == \"B\" & mutate < mu] <- \"A\"\n    \n    p[[t]] <- sum(agent == \"A\") / N\n    \n  }\n  return(p)\n}\n\n## helper functions\n\nrerun_parallel <- function(S, f, ...) {\n  stopifnot(is.function(f))\n  params <- list(...)\n  \n  ## parallel runs\n  require(future.apply)\n  plan(multisession, workers = parallel::detectCores() - 1L)\n  sim <- future_replicate(S, do.call(f, params))\n  colnames(sim) <- paste0(\"run\", 1:S)\n  \n  ## data processing\n  output <- tibble::as_tibble(sim) |> \n    tibble::rowid_to_column(\"generation\") \n  \n  structure(output, params = params, model = deparse(substitute(f)))\n}\n\nplotSimulation <- function(rerun_out) {\n  \n  params <- unlist(attr(rerun_out, \"params\"))\n  param_labels <- paste(paste(names(params), params, sep = \"=\"), collapse = \"\\n\")\n  \n  avg <- rowMeans(rerun_out |> select(!generation))\n  \n  rerun_out |> \n    pivot_longer(!generation, names_to = \"simulation\", values_to = \"p\") |> \n    ggplot(aes(generation, p)) + \n    geom_line(alpha = 1/10, aes(group = simulation)) + \n    ylim(0, 1) + \n    geom_line( ## average\n      data = tibble(generation = 1:params[[\"t_max\"]], p = avg), \n      color = \"pink\"\n    ) + \n    labs(caption = param_labels, title = attr(rerun_out, \"model\"))\n  \n}\n```\n\nThis is how we do it ðŸŽµ\n\n```{r}\nout <- rerun_parallel(S = 100, UnbiasedMutation, N = 100, mu = 0.05, t_max = 200, p_0 = 0.5) \nplotSimulation(out)\n```\n\n> As one might expect, unbiased mutation produces random fluctuations over time, and does not alter the overall frequency of $A$ which stays around $p=0.5$. Because mutations from $A$ to $B$ are as equally likely as $B$ to $A$, there is no overall directional trend.\n>\n> But what if we were to start at different initial frequencies of $A$ and $B$? Say, $p=0.2$ or $p=0.9$? Would unbiased mutation keep $p$ at these initial values, like we saw unbiased transmission does in @sec-unbiased-transmission?\n\nThe answer is NO.\n\n```{r}\nout <- rerun_parallel(S = 100, UnbiasedMutation, N = 100, mu = 0.05, t_max = 200, p_0 = 0.1) \nplotSimulation(out)\n\nrerun_parallel(S = 100, UnbiasedMutation, N = 100, mu = 0.05, t_max = 200, p_0 = 0.99) |>\n  plotSimulation()\n```\n\n<aside>Unbiased mutation always leads to $p=0.5$.</aside>\n\n[MATH EXPLAINER](https://bookdown.org/amesoudi/ABMtutorial_bookdown/model2.html#analytical-appendix-1)\n\nNow we'll do the same simulation, but with three traits $(A, B, C)$.\n\n```{r}\nUnbiasedMutationThreeTraits <- function(\n    N,      # number of agents,\n    mu,     # mutation probability,\n    pA_0,   # initial proportion of trait \"A\"\n    pB_0,   # initial proportion of trait \"B\"\n    t_max   # number of generations\n  ) {\n  \n  agent <- sample(\n    x = c(\"A\", \"B\", \"C\"), \n    size = N, \n    replace = TRUE, \n    prob = c(pA_0, pB_0, 1-pA_0-pB_0)\n  )\n  \n  p <- vector(\"double\", length = t_max)\n  p[[1]] <- sum(agent == \"A\") / N\n  \n  for (t in 2:t_max) {\n    previous_agent <- agent  \n    \n    ## mutation\n    mutate <- runif(N)\n    \n    agent[previous_agent == \"A\" & mutate < mu] <- sample(c(\"B\", \"C\"), size = 1)\n    agent[previous_agent == \"B\" & mutate < mu] <- sample(c(\"A\", \"C\"), size = 1)\n    agent[previous_agent == \"C\" & mutate < mu] <- sample(c(\"A\", \"B\"), size = 1)\n    \n    p[[t]] <- sum(agent == \"A\") / N\n    \n  }\n  return(p)\n}\n```\n\nDoes $p$ still converge on 0.5, as it does with only two traits?\n\n```{r}\nout <- rerun_parallel(\n  S = 100, \n  f = UnbiasedMutationThreeTraits, \n  N = 100,\n  mu = 0.05,   \n  pA_0 = 0.9, \n  pB_0 = 0.05, \n  t_max = 200\n)\n\nplotSimulation(out)\n```\n\nNo, it converges to $\\frac{1}{3}$.\n\n## Biased Mutation\n\n> Let's assume now that there is a probability $\\mu_b$ that an agent with trait $B$ mutates into $A$, but there is no possibility of trait $A$ mutating into trait $B$. Perhaps trait $A$ is a particularly catchy or memorable version of a story, or an intuitive explanation of a phenomenon, and $B$ is difficult to remember or unintuitive.\n>\n> The function `BiasedMutation()` captures this unidirectional mutation.\n\n```{r}\nBiasedMutation <- function(\n    N,    # number of agents,\n    mu_b, # mutation probability,\n    p_0,  # initial proportion of trait \"A\"\n    t_max # number of generations\n  ) {\n  \n  agent <- sample(c(\"A\", \"B\"), size = N, replace = TRUE, prob = c(p_0, 1-p_0))\n  p <- vector(\"double\", length = t_max)\n  p[[1]] <- sum(agent == \"A\") / N\n  \n  for (t in 2:t_max) {\n    previous_agent <- agent  \n    \n    ## mutation\n    mutate <- runif(N)\n    \n    # taking this line out makes introduces the bias:\n    #agent[previous_agent == \"A\" & mutate < mu_b] <- \"B\" \n    agent[previous_agent == \"B\" & mutate < mu_b] <- \"A\"\n    \n    p[[t]] <- sum(agent == \"A\") / N\n    \n  }\n  return(p)\n  \n}\n```\n\nTo see the effects of biased mutation, we'll start with a population with all $B$ traits.\n\n```{r}\nout <- rerun_parallel(100, BiasedMutation, N = 100, mu_b = 0.05, p_0 = 0, t_max = 200)\nplotSimulation(out)\n```\n\nWe can try this same thing with different parameters for $N$ and $\\mu_b$.\n\n```{r}\nout <- rerun_parallel(100, BiasedMutation, N = 10e3, mu_b = 0.05, p_0 = 0, t_max = 200)\nplotSimulation(out)\n```\n\n```{r}\nout <- rerun_parallel(100, BiasedMutation, N = 100, mu_b = 0.2, p_0 = 0, t_max = 200)\nplotSimulation(out)\n```\n\n> In terms of programming techniques, the major novelty in \\[this Chapter\\] is the use of `runif` to generate a series of $N$ random numbers from 0 to 1 and compare these to a fixed probability (in our case, $\\mu$ or $\\mu_b$) to determine which agents should undergo whatever the fixed probability specifies (in our case, mutation). This could be done with a loop, but vectorising code in the way we did here is much faster in R than loops.\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"mutation.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.0.37","bibliography":["references.bib"],"editor":"visual","theme":"lumen","mainfont":"Amiri","monofont":"Fira Code","fontsize":"1em"},"extensions":{"book":{"multiFile":true}}}}}